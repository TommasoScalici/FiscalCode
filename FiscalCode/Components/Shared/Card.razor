@using CommunityToolkit.Maui.Core

@using FiscalCode.Components.Pages
@using FiscalCode.Configuration
@using FiscalCode.Data
@using FiscalCode.Resources.Languages

@using ISnackbar = MudBlazor.ISnackbar

@inject IDialogService DialogService
@inject IPopupService PopupService
@inject ISnackbar Snackbar
@inject IStringLocalizer<Localization> Localizer


<MudCard Class="m-5 w-full sm:w-80">

    <MudCardContent>
        <MudButton OnClick="ShowBarcodeAsync" Class="block mb-5" Color="Color.Primary"
                   FullWidth="true" Variant="Variant.Filled">
            <MudText Class="text-2xl" Typo="Typo.h6">@FiscalCodeDTO.FiscalCode</MudText>
        </MudButton>

        <MudText Class="inline">@Localizer["FirstName"]: </MudText>
        <MudText Class="inline font-semibold">@FiscalCodeDTO.FirstName</MudText>
        <br />

        <MudText Class="inline">@Localizer["LastName"]: </MudText>
        <MudText Class="inline font-semibold">@FiscalCodeDTO.LastName</MudText>
        <br />

        <MudText Class="inline">@Localizer["Sex"]: </MudText>
        <MudText Class="inline font-semibold">@FiscalCodeDTO.Sex</MudText>
        <br />

        <MudText Class="inline">@Localizer["Birthdate"]: </MudText>
        <MudText Class="inline font-semibold">@FiscalCodeDTO.BirthDate?.Date.ToString("d")</MudText>
        <br />

        <MudText Class="inline">@Localizer["Birthplace"]: </MudText>
        <MudText Class="inline font-semibold">@($"{FiscalCodeDTO.BirthPlace?.Name} ({FiscalCodeDTO.BirthPlace?.State})")</MudText>
        
    </MudCardContent>

    <MudCardActions>
        <MudIconButton OnClick="CopyToClipboardAsync" Icon="@Icons.Material.Filled.ContentCopy" Title="Copy" />
        <MudIconButton OnClick="EditFiscalCodeAsync" Icon="@Icons.Material.Filled.Edit" Title="Edit" />
        <MudIconButton OnClick="DeleteFiscalCodeAsync" Icon="@Icons.Material.Filled.Delete" Title="Delete" />
    </MudCardActions>

</MudCard>

@code {
    [Parameter]
    public EventCallback<FiscalCodeDTO> OnDelete { get; set; }

    [Parameter]
    public EventCallback<FiscalCodeDTO> OnEdit { get; set; }

    [Parameter]
    public FiscalCodeDTO FiscalCodeDTO { get; set; } = new();


    private static readonly SnackbarConfiguration config = new()
        {
            PositionClass = Defaults.Classes.Position.BottomCenter,
            NewestOnTop = true,
            PreventDuplicates = true,
        };


    private async Task CopyToClipboardAsync()
    { 
        await Clipboard.Default.SetTextAsync(FiscalCodeDTO.FiscalCode);
        Snackbar.Add(@Localizer["SuccessCopy"], Severity.Success);
    }

    private async Task DeleteFiscalCodeAsync()
    {
        await OnDelete.InvokeAsync(FiscalCodeDTO);
        Snackbar.Add(@Localizer["SuccessDelete"], Severity.Success);
    }

    private async Task EditFiscalCodeAsync()
    {
        await OnEdit.InvokeAsync(FiscalCodeDTO);
        Snackbar.Add(@Localizer["SuccessEdit"], Severity.Success);
    }

    private async Task ShowBarcodeAsync()
    {
        var navigation = Application.Current?.MainPage?.Navigation;

        if (navigation is not null)
        {
            var barcodePopup = new BarcodePopup { BindingContext = FiscalCodeDTO };
            await navigation.PushModalAsync(barcodePopup);
        }
    }
}
