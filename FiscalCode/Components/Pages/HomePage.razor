@page "/"

@using System.Diagnostics

@using FiscalCode.Components.Shared
@using FiscalCode.Configuration
@using FiscalCode.Data
@using FiscalCode.Resources.Languages
@using FiscalCode.Services
@using FiscalCode.Types

@using Microsoft.Maui.Controls.PlatformConfiguration
@using Microsoft.Maui.Controls.PlatformConfiguration.AndroidSpecific
@using Plugin.MauiMTAdmob

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IStringLocalizer<Localization> Localizer;
@inject FiscalCodeDataService Service


<AppBar OnAddButtonClicked="OpenAddFormDialogAsync" />

<div class="flex flex-wrap flex-grow">
    @foreach (var item in fiscalCodes)
    {
        <Card FiscalCodeDTO="item" OnEdit="@(() => OpenEditFormDialogAsync(item))" OnDelete="DeleteFiscalCodeAsync" />
    }
</div>

@if (isBusy)
{
    <div class="absolute left-[50%] top-[50%]">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}

<MudOverlay @bind-Visible="isBusy" DarkBackground="true" />

@code {
    private List<FiscalCodeDTO> fiscalCodes = new();
    private bool isBusy;


    protected override async Task OnInitializedAsync()
    {
        var savedFiscalCodes = await FiscalCodeDataService.LoadFiscalCodesFromFileAsync();
        fiscalCodes.AddRange(savedFiscalCodes);
        await base.OnInitializedAsync();
    }

    private async Task DeleteFiscalCodeAsync(FiscalCodeDTO dto)
    {
        fiscalCodes.Remove(dto);
        await FiscalCodesUpdatedAsync();
    }

    private async Task OpenAddFormDialogAsync()
    {
        try
        {
            var parameters = new DialogParameters<FormDialog>();
            parameters.Add(d => d.FormMode, FormMode.Add);

            var dialog = await DialogService.ShowAsync<FormDialog>(Localizer["FillData"], parameters, Config.DialogOptions);
            var result = await dialog.Result;

            if (result.Data is FiscalCodeDTO dto)
            {
                isBusy = true;
                StateHasChanged();

                if(string.IsNullOrEmpty(dto.FiscalCode))
                    dto.FiscalCode = await Service.CalculateFiscalCodeAsync(dto);

                fiscalCodes.Add(dto);
                await FiscalCodesUpdatedAsync();

                isBusy = false;
                Snackbar.Add(@Localizer["SuccessAdd"], Severity.Success);
            }
        }

        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            Snackbar.Add(@Localizer["Whoops"], Severity.Error);
        }        
    }

    private async Task OpenEditFormDialogAsync(FiscalCodeDTO dto)
    {
        try
        {
            var parameters = new DialogParameters<FormDialog>();
            parameters.Add(d => d.FormData, dto);
            parameters.Add(d => d.FormMode, FormMode.Edit);

            var dialog = await DialogService.ShowAsync<FormDialog>(Localizer["FillData"], parameters, Config.DialogOptions);
            var result = await dialog.Result;

            if (result.Data is FiscalCodeDTO modifiedDTO)
            {
                isBusy = true;
                StateHasChanged();

                dto.FiscalCode = await Service.CalculateFiscalCodeAsync(modifiedDTO);
                await FiscalCodesUpdatedAsync();
                isBusy = false;
            }


        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            Snackbar.Add(@Localizer["Whoops"], Severity.Error);
        }       
    }

    private async Task FiscalCodesUpdatedAsync()
    {
        await FiscalCodeDataService.SaveFiscalCodesToFileAsync(fiscalCodes);

        if (CrossMauiMTAdmob.IsSupported)
        {
            if (fiscalCodes.Count % 2 == 0)
            {
                CrossMauiMTAdmob.Current.LoadInterstitial(Secret.AdUnitInterstitial);

                CrossMauiMTAdmob.Current.OnInterstitialLoaded += (sender, e) =>
                {
                    CrossMauiMTAdmob.Current.ShowInterstitial();
                };
            }
        }
    }
}