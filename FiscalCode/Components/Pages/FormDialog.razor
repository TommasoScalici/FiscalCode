@using FiscalCode.Data
@using FiscalCode.Features
@using FiscalCode.Resources.Languages
@using FiscalCode.Services
@using FiscalCode.Types

@inject IStringLocalizer<Localization> Localizer
@inject BirthplaceDataService BirthplaceService
@inject FiscalCodeOCRAnalyzerService OCRAnalyzerService;

<MudDialog>

    <TitleContent>
        <MudText Typo="Typo.h5">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-4" /> @Localizer["FillData"]
        </MudText>
    </TitleContent>

    <DialogContent>

        <MudForm @ref="form">

            <MudContainer Class="flex items-center justify-center my-5">
                <MudButton OnClick="OpenScannerPageAsync" StartIcon="@Icons.Material.Filled.PhotoCamera"
                           Color="Color.Primary" Variant="Variant.Filled">
                    @Localizer["ScanCard"]
                </MudButton>
            </MudContainer>
            <MudTextField @bind-Value="@FormData.FirstName" T="string" Label="@Localizer["FirstName"]"
                          Required="true" RequiredError="@Localizer["FirstNameError"]"
                          Class="my-5" />

            <MudTextField @bind-Value="@FormData.LastName" T="string" Label="@Localizer["LastName"]"
                          Required="true" RequiredError="@Localizer["LastNameError"]"
                          Class="my-5" />

            <div Class="flex my-5">
                <MudSelect @bind-Value="@FormData.Sex" T="string" Label="@Localizer["Sex"]"
                            Required="true" RequiredError="@Localizer["SexError"]"
                            Class="mr-5 w-20">
                    <MudSelectItem Value="@(string.Empty)" />
                    <MudSelectItem Value="@("M")" />
                    <MudSelectItem Value="@("F")" />
                </MudSelect>

                <MudDatePicker @bind-Date="@FormData.BirthDate" Label="@Localizer["Birthdate"]" Placeholder="@Localizer["Birthdate"]"
                               Editable="true" OpenTo="OpenTo.Year"
                               Required="true" RequiredError="@Localizer["BirthdateError"]" />
            </div>

            <MudAutocomplete @bind-Value="FormData.BirthPlace" T="BirthplaceDTO" Label="@Localizer["BirthplacePlaceholder"]"
                             SearchFunc="@SearchAsync" ToStringFunc="@(b => b == null ? null : $"{b.Name} ({b.State})")"
                             ResetValueOnEmptyText="true" Required="true" RequiredError="@Localizer["BirthplaceError"]"
                             Class="my-5" />

            <MudContainer Class="flex items-center justify-center my-5">
                <MudButton OnClick="@HandleSubmitAsync" Color="Color.Primary" Variant="Variant.Filled">
                    @Localizer["Confirm"]
                </MudButton>
            </MudContainer>
        </MudForm>

    </DialogContent>

</MudDialog>


@code {
    private MudForm? form;
    private PhotoScannerOCR? scanner;

    
    [Parameter]
    public FiscalCodeDTO FormData { get; set; } = new();

    [Parameter]
    public FormMode FormMode { get; set; }

    [CascadingParameter]
    public MudDialogInstance? MudDialog { get; private set; }


    private async Task HandleSubmitAsync()
    {
        if(form != null)
        {
            await form.Validate();

            if(form.IsValid)
            {
                MudDialog?.Close(DialogResult.Ok(FormData));
                FormData = new();
            }
        }
    }

    private async Task OpenScannerPageAsync()
    {
        scanner = scanner ?? new PhotoScannerOCR(OCRAnalyzerService);
        FormData = await scanner.GetFiscalCodeDTOFromOCRScanAsync();
    }

    private async Task<IEnumerable<BirthplaceDTO>> SearchAsync(string value)
    {
        var birthplaces = await BirthplaceService.GetBirthplacesAsync();
        var startsWithFilter = birthplaces.Where(x => x.Name.StartsWith(value, StringComparison.OrdinalIgnoreCase));

        if (startsWithFilter.Count() > 0)
            return startsWithFilter;

        var containsFilter = birthplaces.Where(x => x.Name.Contains(value, StringComparison.OrdinalIgnoreCase));

        return containsFilter;
    }
}
