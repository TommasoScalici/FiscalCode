@using FiscalCode.Data
@using FiscalCode.Features
@using FiscalCode.Resources.Languages
@using FiscalCode.Services
@using FiscalCode.Types

@inject IStringLocalizer<Localization> Localizer
@inject BirthplaceDataService BirthplaceService
@inject FiscalCodeOCRAnalyzerService OCRAnalyzerService;

<MudDialog Class="m-5">

    <TitleContent>
        <MudText Typo="Typo.h5">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-4" /> @Localizer["FillData"]
        </MudText>
    </TitleContent>

    <DialogContent>

        <MudForm @ref="form">

            <div class="flex items-center justify-center">
                <MudButton OnClick="OpenScannerPageAsync" StartIcon="@Icons.Material.Filled.PhotoCamera"
                            Color="Color.Primary" Variant="Variant.Filled">
                    @Localizer["ScanCard"]
                </MudButton>
            </div>

            <MudTextField @bind-Value="@FormData.FirstName" T="string" Label="@Localizer["FirstName"]"
                            Required="true" RequiredError="@Localizer["FirstNameError"]"
                            Class="my-5" />

            <MudTextField @bind-Value="@FormData.LastName" T="string" Label="@Localizer["LastName"]"
                            Required="true" RequiredError="@Localizer["LastNameError"]"
                            Class="my-5" />

            <div Class="flex my-5">
                <MudSelect @bind-Value="@FormData.Sex" T="string" Label="@Localizer["Sex"]"
                            Required="true" RequiredError="@Localizer["SexError"]"
                            Class="mr-5 w-20">
                    <MudSelectItem Value="@(string.Empty)" />
                    <MudSelectItem Value="@("M")" />
                    <MudSelectItem Value="@("F")" />
                </MudSelect>

                <MudDatePicker @bind-Date="@FormData.BirthDate" 
                                Label="@Localizer["Birthdate"]" Placeholder="@Localizer["Birthdate"]"
                                Editable="true" OpenTo="OpenTo.Year" PickerVariant="PickerVariant.Dialog"
                                IsDateDisabledFunc="@((DateTime dt) => dt > DateTime.Now)"
                                ErrorText="@Localizer["BirthdateValidationError"]"
                                Validation="@(new Func<DateTime, string?>(BirthdateValidation))"
                                Required="true" RequiredError="@Localizer["BirthdateError"]" />
            </div>

            <MudAutocomplete @ref="autocomplete" @bind-Value="FormData.BirthPlace"
                              T="BirthplaceDTO" Label="@Localizer["BirthplacePlaceholder"]"
                              SearchFunc="@SearchAsync" ToStringFunc="@(b => b == null ? null : $"{b.Name} ({b.State})")"
                              Clearable="true" ResetValueOnEmptyText="true"
                              Required="true" RequiredError="@Localizer["BirthplaceError"]"
                              Dense="true" IsOpenChanged="@OnAutocompleteOpenChangedAsync" Class="my-5" />

            <MudContainer Class="flex items-center justify-center my-5">
                <MudButton OnClick="@HandleSubmitAsync" Color="Color.Primary" Variant="Variant.Filled">
                    @Localizer["Confirm"]
                </MudButton>
            </MudContainer>

        </MudForm>

        <MudOverlay @bind-Visible="isBusy" DarkBackground="true" />

        @if (isBusy)
        {
            <div class="absolute left-[50%] top-[50%] -mx-5 -my-5">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
    </DialogContent>

</MudDialog>


@code {
    private bool isBusy;
    private MudAutocomplete<BirthplaceDTO>? autocomplete;
    private MudForm? form;
    private PhotoScannerOCR? scanner;


    [Parameter]
    public FiscalCodeDTO FormData { get; set; } = new();

    [Parameter]
    public FormMode FormMode { get; set; }

    [CascadingParameter]
    public MudDialogInstance? MudDialog { get; private set; }


    private string? BirthdateValidation(DateTime dateTime)
    {
        if (dateTime > DateTime.Now)
            return Localizer["BirthdateValidationError"];

        return null;
    }

    private async Task HandleSubmitAsync()
    {
        if (form != null)
        {
            await form.Validate();

            if (form.IsValid)
            {
                MudDialog?.Close(DialogResult.Ok(FormData));
                FormData = new();
            }
        }
    }

    private async Task OnAutocompleteOpenChangedAsync(bool isOpen)
    {
        // Trick to hide virtual keyboard when the autocomplete menu is closed
        if(autocomplete != null && !isOpen)
        {
            #pragma warning disable BL0005 // Needed for the trick
            autocomplete.Disabled = true;
            await Task.Delay(100);
            autocomplete.Disabled = false;
            #pragma warning restore
        }
    }

    private async Task OpenScannerPageAsync()
    {
        scanner = scanner ?? new PhotoScannerOCR(OCRAnalyzerService);
        var photo = await PhotoScannerOCR.CapturePhotoAsync();

        if(photo != null)
        {
            isBusy = true;
            StateHasChanged();

            using var stream = await photo.OpenReadAsync();
            var scanOCR = await PhotoScannerOCR.PerformOCRScanAsync(stream);

            if(scanOCR != null)
                FormData = await scanner.GetFiscalCodeDTOFromOCRScanAsync(scanOCR);

            isBusy = false;
        }
    }

    private async Task<IEnumerable<BirthplaceDTO>> SearchAsync(string value)
    {
        var birthplaces = await BirthplaceService.GetBirthplacesAsync();
        var startsWithFilter = birthplaces.Where(x => x.Name.StartsWith(value, StringComparison.OrdinalIgnoreCase));

        if (startsWithFilter.Count() > 0)
            return startsWithFilter;

        var containsFilter = birthplaces.Where(x => x.Name.Contains(value, StringComparison.OrdinalIgnoreCase));

        return containsFilter.Distinct();
    }
}
